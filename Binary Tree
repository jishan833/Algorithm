#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* left;
    Node* right;
    Node(int value)
    {
     data = value;
     left=right=nullptr;
    }
};
Node* insert(Node* root,int value)
{
    if(root==nullptr)
    {
         return new Node(value);
    }
    if(value<root->data)
    {
        root-> left=insert(root->left,value);
    }
    else
    {
        root->right=insert(root->right,value);
    }
 return root;
}
void inorderTraversal(Node* root)
{
    if (root != nullptr)
    {

        inorderTraversal(root->left);
        cout<<root->data<<" ";
        inorderTraversal(root->right);
    }
}
void preorder(Node* root)
{
    if(root != nullptr)
    {
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(Node* root)
{
    if(root !=nullptr)
    {
        cout<< root->data<<" ";
        postorder(root->left);
        postorder(root->right);
    }
}
int main()
{
    Node* root=nullptr;
    int n, value;
    cout<<"Enter number of vertex: ";
    cin>> n;
    cout<<"Enter number of element: ";
    for(int i=0;i<n;i++)
    {
        cin>> value;
        root=insert(root,value);
    }
    cout<<"In-order traversal of the BST: ";
    inorderTraversal(root);
    cout<<"Pre-order traversal of the BST: ";
    preorder(root);
    cout<<"Post-order traversal of the BST: ";
    postorder(root);
    return 0;
}
