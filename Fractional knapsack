#include <stdio.h> 
#include <stdlib.h> 
struct Item { 
    int profit; 
    int weight; 
}; 
int cmp(const void *a, const void *b) 
{ 
    double r1 = ((struct Item*)a)->profit / (double)((struct Item*)a)->weight; 
    double r2 = ((struct Item*)b)->profit / (double)((struct Item*)b)->weight; 
    if (r1 < r2) return 1; 
    else if (r1 > r2) return -1; 
    return 0; 
} 
double fractionalKnapsack(int W, struct Item arr[], int N) 
 { 
    qsort(arr, N, sizeof(struct Item), cmp); 
    double finalvalue = 0.0; 
    printf("Sorted items by profit-to-weight ratio:\n"); 
    for (int i = 0; i < N; i++) { 
        printf("Item %d: Profit = %d, Weight = %d\n", i + 1, arr[i].profit, arr[i].weight); 
    } 
    for (int i = 0; i < N; i++) 
        { 
        if (arr[i].weight <= W) 
        { 
            W -= arr[i].weight; 
            finalvalue += arr[i].profit; 
            printf("Taking full item %d: Profit = %d, Weight = %d, Remaining Capacity = %d\n", 
                   i + 1, arr[i].profit, arr[i].weight, W); 
        } 
        else 
        { 
            finalvalue += arr[i].profit * ((double)W / (double)arr[i].weight); 
            printf("Taking fractional part of item %d: Profit = %d, Weight = %d, Fraction = %.2f\n", 
                   i + 1, arr[i].profit, arr[i].weight, (double)W / (double)arr[i].weight); 
            break; 
        } 
    } 
    return finalvalue; 
} 
int main() 
{ 
    int Cap = 18; 
    struct Item list[] = { {5, 12}, {10, 25}, {7, 19}, {12, 13} }; 
    int N = sizeof(list) / sizeof(list[0]); 
    printf("Maximum value in Knapsack = %.2f\n", fractionalKnapsack(Cap, list, N)); 
    return 0; 
} 
